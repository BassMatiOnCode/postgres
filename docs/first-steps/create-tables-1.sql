-- Some notes
-- ID is always a primary key column.
--TablenameID is always a foreign key column, referencing the ID column of Tablename
-- RG is the row generation counter, used for concurrent update conflict detection. The value is incremented by an update trigger function.
-- The not-null column constraint is used wherever possible, especially in foreign key columns and character columns.

\echo -- Creating table Carrier
CREATE TABLE if not exists Carrier (
	ID integer PRIMARY KEY generated by default as identity ,
	RG integer not null default 0,
	Name varchar(20) not null default '' ,
	Phone varchar(20) not null default ''
	) ;
CREATE TRIGGER CarrierBeforeUpdate before update on Carrier
    for each row when ( old.* is distinct from new.* ) execute procedure incrementRowGen( ) ;
INSERT into Carrier ( id, name, phone ) values ( 0, 'undefined', '' ) ;

\echo -- Creating table ProductCategory
CREATE TABLE if not exists ProductCategory (
	ID integer PRIMARY KEY generated by default as identity ,
	RG integer not null default 0 ,
	Name varchar(20) not null default '' ,
	Description text not null default '' 
	) ;
CREATE TRIGGER ProductCategoryBeforeUpdate before update on ProductCategory
    for each row when ( old.* is distinct from new.* ) execute procedure incrementRowGen( ) ;
INSERT into ProductCategory ( id, name ) values ( 0, 'undefined' ) ;

\echo -- Creating table Customer
CREATE TABLE if not exists Customer (
	ID integer PRIMARY KEY generated by default as identity ,
	RG integer not null default 0,
	Key char(5) unique not null,
	Name varchar(50) not null default '' ,
	ContactName varchar(30) not null default '' ,
	ContactTitle varchar(30) not null default '' ,
	Address varchar(50) not null default '' ,
	City varchar(30) not null default '' ,
	Region varchar(30) not null default '' ,
	PostalCode varchar(10) not null default '' ,
	Country varchar(30) not null default '' ,
	Phone varchar(20) not null default '' ,
	Fax varchar(20) not null default '' 
	) ;
CREATE TRIGGER CustomerBeforeUpdate before update on Customer
    for each row when ( old.* is distinct from new.* ) execute procedure incrementRowGen( ) ;

	\echo -- Creating table Employee
CREATE TABLE if not exists Employee (
	ID integer PRIMARY KEY generated by default as identity ,
	RG integer not null default 0,
	LastName varchar(20) not null default '' ,
	FirstName varchar(20) not null default '' ,
	Title varchar(30) not null default '' ,
	TitleOfCourtesy varchar(20) not null default '' ,
	BirthDate DATE , 
	HireDate DATE , 
	Address varchar(50) not null default '' ,
	City varchar(20) not null default '' ,
	Region varchar(30) not null default '' ,
	PostalCode varchar(10) not null default '' ,
	Country varchar(20) not null default '' ,
	HomePhone varchar(20) not null default '' ,
	Extension varchar(5) not null default '' ,
	Notes text not null default '' ,
	ReportingParentID integer not null default 0 references Employee( ID )
	) ;
CREATE TRIGGER EmployeeUpdate before update on Employee
    for each row when ( old.* is distinct from new.* ) execute procedure incrementRowGen( ) ;
INSERT into Employee ( id ) values ( 0 );
COMMENT on column Employee.ReportingParentID is 'Defines the reporting tree. Use 0 to for employees that don''t report.' ;

\echo -- Creating table CustomerOrder
CREATE TABLE if not exists CustomerOrder (
	ID integer PRIMARY KEY generated by default as identity ,
	RG integer not null default 0,
	CustomerID integer not null REFERENCES Customer ( ID ) 
		on update cascade ,
	EmployeeID integer not null REFERENCES Employee ( ID ) 
		on update cascade ,
	OrderDate date ,
	RequiredDate date ,
	ShippedDate date ,
	CarrierID integer not null default 0 references carrier (id) ,
	ShippingCost money not null default 0, 
	RecipientName varchar (50) not null default '' ,
	RecipientAddress varchar (50) not null default '' ,
	RecipientCity varchar (30) not null default '' ,
	RecipientRegion varchar(30) not null default '' ,
	RecipientPostalcode varchar (10) not null default '' ,
	RecipientCountry varchar (20) not null default '' 
	) ;
CREATE TRIGGER CustomerOrderUpdate before update on CustomerOrder
    for each row when ( old.* is distinct from new.* ) execute procedure incrementRowGen( ) ;
COMMENT on table CustomerOrder is 'Defines a customer order and records its state and fulfillment.' ; 

\echo -- Creating table Supplier
CREATE TABLE if not exists Supplier (
	ID integer PRIMARY KEY generated by default as identity ,
	RG integer not null default 0,
	Name varchar(50) not null default '' ,
	ContactName varchar(30) not null default '' ,
	ContactTitle varchar(30) not null default '' ,
	Address varchar(50) not null default '' ,
	City varchar(30) not null default '' ,
	Region varchar(30) not null default '' ,
	PostalCode varchar(10) not null default '' ,
	Country varchar(20) not null default '' ,
	Phone varchar(20) not null default '' ,
	Fax varchar(20) not null default '' ,
	Homepage varchar(100) not null default ''
	) ;
CREATE TRIGGER SupplierUpdate before update on Supplier
    for each row when ( old.* is distinct from new.* ) execute procedure incrementRowGen( ) ;

\echo --- Creating table Product
CREATE TABLE if not exists Product (
	ID integer PRIMARY KEY generated by default as identity ,
	RG integer not null default 0,
	Name varchar(50) not null default '' ,
	SupplierID integer not null references Supplier( ID ) 
		on update cascade ,
	ProductCategoryID integer not null references ProductCategory( ID ) 
		on update cascade ,
	UnitQuantity varchar (30) not null default '' ,
	UnitPrice money not null default 0 ,
	UnitsInStock real not null default 0.0 ,
	UnitsOnOrder real not null default 0.0 ,
	ReorderLevel real not null default 0.0 ,
	Discontinued integer not null default 0
	) ;
CREATE TRIGGER ProductUpdate before update on Product
    for each row when ( old.* is distinct from new.* ) execute procedure incrementRowGen( ) ;

\echo -- Creating table CustomerOrderItem
CREATE TABLE if not exists CustomerOrderItem (
	CustomerOrderID integer not null REFERENCES CustomerOrder( ID ) 
		on update cascade 
		on delete cascade ,
	ProductID integer not null REFERENCES Product( ID ) 
		on update cascade ,
	PRIMARY KEY ( CustomerOrderID, ProductID ) ,
	RG integer not null default 0 ,
	UnitPrice money not null default 0 ,
	Discount money not null default 0 ,
	QuantityOrdered REAL not null default 0 ,
	QuantityShipped REAL not null default 0 
	) ;
CREATE TRIGGER CustomerOrderItemUpdate before update on CustomerOrderItem
    for each row when ( old.* is distinct from new.* ) execute procedure incrementRowGen( ) ;

\echo --- Creating table Region
CREATE TABLE if not exists Region (
	ID integer PRIMARY KEY generated by default as identity ,
	RG integer not null default 0,
	Name varchar(20) not null default '' 
	) ;
CREATE TRIGGER RegionUpdate before update on Region
    for each row when ( old.* is distinct from new.* ) execute procedure incrementRowGen( ) ;
INSERT into Region ( id, name ) values ( 0, 'undefined' ) ;

\echo --- Creating table Territory
CREATE TABLE if not exists Territory (
	ID integer PRIMARY KEY generated by default as identity ,
	RG integer not null default 0,
	Key varchar(8) unique not null default '' ,
	Name varchar(20) not null default '' ,
	RegionID integer not null default 0 References Region( ID )
	) ;
CREATE TRIGGER TerritoryUpdate before update on Territory
    for each row when ( old.* is distinct from new.* ) execute procedure incrementRowGen( ) ;
INSERT into territory ( id, key, name, regionid ) values ( 0, '0', 'Undefined', 0 ) ;

\echo --- Creating table EmployeeTerritory
CREATE TABLE if not exists EmployeeTerritory (
	EmployeeID integer not null references Employee( ID ) ,
	TerritoryID integer not null references Territory( ID ) ,
	PRIMARY KEY ( EmployeeID, TerritoryID ) ,
	RG integer not null default 0
	) ;
CREATE TRIGGER EmployeeTerritoryUpdate before update on EmployeeTerritory
    for each row when ( old.* is distinct from new.* ) execute procedure incrementRowGen( ) ;
