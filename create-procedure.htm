<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm"version="2021-08-23" editor-name="usp" />
<meta name="author" content="usp" />
<meta name="creation-date" content="2021-12-20" />
<meta name="editor" content="usp" />
<meta name="change-date" content="2021-12-20" />
<meta name="version" content="1" />
<meta name="categories" content="Programming > Databases > Postgres" />
<meta name="tags" content="programming, database, postgres, type, dynamic, sql" />
<meta name="description" content="Stored procedures and functions." />

<link rel="stylesheet" href="/inc/page.css" />
 
<title>Postgres - Stored Frocedures and Functions</title>

</head><body><div id="page-header"></div><div id="main-toolbar"></div><div id="content">

<h1>Frocedures and Functions</h1>

<p id="page-abstract"></p>

<p></p>

<!--<figcaption class="listing"></figcaption>

<pre>

</pre>
-->

<pre>
type FieldUpdateInfoType = {
	columnName::string ,
	originalValue::any ,
	proposedValue::any ,
	currentValue::any
	}

function genericRowUpdate ( tableName, rowID, updateInfo: FieldUpdateInfoType[ ] ) { 
	///		Updates a target with optimistic concurrency control
	///		WHERE ID = ( col.current IS NOT DISTINCT FROM col.original OR col.current IS NOT DISTINCT FROM col.proposed )
	tableName = escapeTableName( tableName );
	updateInfo = escapeColumnNames( updateInfo );
	let arguments = [ ] ;
	arguments.push( "UPDATE " + escapeTableName( tableName ) + " SET " );
	// Compile the column updates
	for ( let i = 0 ; i < updateInfo.length ; i ++ ) {
		if ( typeof updateInfo[ i ].proposedValue !== "undefined" ) arguments[ 0 ] +=  ( i === 0 ? " " : "," ) + updateInfo[ i ].columnName + " =?" ;
		arguments.push( updateInfo[ i ].proposedValue );
		}
	// Compile the where clause row ID filter
	arguments[ 0 ] += " WHERE ID=? " ;
	arguments.push( rowID );
	// Compile the optimistic concurrency control columns
	for ( let i = 0 ; i < updateInfo.length ; i ++ ) {
		if ( typeof updateInfo[ i ].originalValue !== "undefined" ) {
			arguments[ 0 ] += " AND ( old." + updateInfo[ i ].columnName + " IS NOT DISTINCT FROM ?" ;
			arguments.push(  updateInfo[ i ].originalValue );
			if ( typeof updateInfo.proposedValue !== "undefined" ) { 
				arguments[ 0 ] +=  " OR old." + updateInfo[ i ].columnName  + " IS NOT DISTINCT FROM ?" ;
			arguments.push(  updateInfo[ i ].proposedValue );
				}	}
		s + ");" ;   // closes the parenthesis opened by AND
		}
	let result = db.executeQuery.call( arguments );	
	}
</pre>

</div><script type="module" src="/inc/page.js" ></script></body></html>